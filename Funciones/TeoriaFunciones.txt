Estructura de datos y objetos

Analizar
Con el constructor no se crean cierres, las funciones siempre son creadas en el ámbito global.
var x = 10; 
function createFunction1() { 
var x = 20; 
return new Function('return x;'); // this |x| refers global |x| 
} 
function createFunction2() { 
var x = 20; 
function f() { 
return x; // this |x| refers local |x| above 
} 
return f; 
} 
var f1 = createFunction1(); console.log(f1()); // 10 
var f2 = createFunction2(); console.log(f2()); // 20


Spread
Claro, te explico el operador spread en JavaScript como si tuviera que contárselo a un principiante.

El operador spread (...) es como un "abrir" o "desenvolver" algo. Imagina que tienes una caja de juguetes, y cada juguete es un elemento de un arreglo. El operador spread permite sacar todos esos juguetes de la caja y usarlos por separado. Aquí te va un ejemplo sencillo:
javascript

let juguetes = ['carro', 'muñeca', 'avión'];
let nuevosJuguetes = ['pelota', ...juguetes, 'tren'];

console.log(nuevosJuguetes);
// Resultado: ['pelota', 'carro', 'muñeca', 'avión', 'tren']

En este caso, ...juguetes abre la caja de juguetes y los agrega al nuevo arreglo nuevosJuguetes.

También se puede usar con objetos:
javascript

let personaje = {nombre: 'Mario', juego: 'Super Mario'};
let detalles = {compañero: 'Luigi', ...personaje, consola: 'Nintendo'};

console.log(detalles);
// Resultado: {compañero: 'Luigi', nombre: 'Mario', juego: 'Super Mario', consola: 'Nintendo'}

De esta manera, ...personaje abre el objeto personaje y copia todas sus propiedades en el nuevo objeto detalles.


Funciones anonimas

Funciones flechas (son parecido a las anonimas): las funciones flechas no tienes argumente, debes usar (...resParag)